{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [userAnswer, setUserAnswer] = React.useState([]);\n  const [data, setData] = React.useState(); // FETCH QUIZ DATA FROM API\n\n  const fetchData = () => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(response => response.json()).then(data => setData(data.results));\n  };\n\n  const buildQuestions = dataArr => {\n    setQuestions(dataArr.map((question, index) => {\n      return {\n        index: index,\n        question: question.question,\n        correctAnswer: question.correct_answer,\n        answers: question.incorrect_answers\n      };\n    }));\n  };\n\n  console.log(questions);\n  React.useEffect(() => {\n    fetchData();\n    buildQuestions(data);\n  }, []); // SHUFFLE ALGORITHM TO USE LATER\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex; // While there remain elements to shuffle.\n\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n  /* const questionElements = questions.map((question, index) => {\n      // ANSWERS ARRAY AND SHUFFLE\n      let answers = [...question.incorrect_answers,question.correct_answer]\n      shuffle(answers)\n       // TOGGLE BUTTON BACKGROUND COLOR WHEN BTN CLICKED\n      function toggleBtnBgColor(btn) {\n          btn.target.classList.toggle(\"dark-bg-color\")\n          btn.target.onclick= \"\"\n      }\n       console.log(question, index)\n       return (\n          <div key={nanoid()}>\n              <div className=\"question\" key={index}>{question.question}</div>\n              {answers.map((answer)=> {\n                  return (\n                      <button key={nanoid()} onClick={toggleBtnBgColor} className=\"answer-button\">{answer}</button>\n                  )\n              })}\n              <hr></hr>\n          </div>\n      )\n  })\n   return (\n      <div className=\"question-container\">\n          {questionElements}\n      </div>\n  ) */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Quiz page\"\n  }, void 0, false);\n}\n\n_s(Quiz, \"LebRXbzG4CBjvd5x4BFI5cPxFg0=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","nanoid","Quiz","questions","setQuestions","useState","userAnswer","setUserAnswer","data","setData","fetchData","fetch","then","response","json","results","buildQuestions","dataArr","map","question","index","correctAnswer","correct_answer","answers","incorrect_answers","console","log","useEffect","shuffle","array","currentIndex","length","randomIndex","Math","floor","random"],"sources":["/Users/emre/Desktop/React/quizzical-trivia/src/Quiz.js"],"sourcesContent":["import React from \"react\"\nimport { nanoid } from \"nanoid\"\n\nexport default function Quiz() {\n\n    const [questions, setQuestions] = React.useState([])\n    const [userAnswer, setUserAnswer] = React.useState([])\n\n    const [data, setData] = React.useState()\n    // FETCH QUIZ DATA FROM API\n    const fetchData = () => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n        .then((response) => response.json())\n        .then((data) => setData(data.results))\n    }\n\n    const buildQuestions = (dataArr) => {\n        setQuestions(\n            dataArr.map((question,index) => {\n                return {\n                    index: index,\n                    question: question.question,\n                    correctAnswer: question.correct_answer,\n                    answers: question.incorrect_answers\n                }\n            })\n        )\n    }\n\n    console.log(questions)\n\n    React.useEffect(()=> {\n        fetchData()\n        buildQuestions(data)\n    },[])\n\n    // SHUFFLE ALGORITHM TO USE LATER\n    function shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle.\n        while (currentIndex != 0) {\n      \n          // Pick a remaining element.\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n    }\n\n    /* const questionElements = questions.map((question, index) => {\n        // ANSWERS ARRAY AND SHUFFLE\n        let answers = [...question.incorrect_answers,question.correct_answer]\n        shuffle(answers)\n\n        // TOGGLE BUTTON BACKGROUND COLOR WHEN BTN CLICKED\n        function toggleBtnBgColor(btn) {\n            btn.target.classList.toggle(\"dark-bg-color\")\n            btn.target.onclick= \"\"\n        }\n\n        console.log(question, index)\n\n        return (\n            <div key={nanoid()}>\n                <div className=\"question\" key={index}>{question.question}</div>\n                {answers.map((answer)=> {\n                    return (\n                        <button key={nanoid()} onClick={toggleBtnBgColor} className=\"answer-button\">{answer}</button>\n                    )\n                })}\n                <hr></hr>\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"question-container\">\n            {questionElements}\n        </div>\n    ) */\n    return (\n        <>Quiz page</>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,eAAe,SAASC,IAAT,GAAgB;EAAA;;EAE3B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAAlC;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,KAAK,CAACK,QAAN,CAAe,EAAf,CAApC;EAEA,MAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACK,QAAN,EAAxB,CAL2B,CAM3B;;EACA,MAAMK,SAAS,GAAG,MAAM;IACpBC,KAAK,CAAC,oDAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOJ,IAAD,IAAUC,OAAO,CAACD,IAAI,CAACO,OAAN,CAFvB;EAGH,CAJD;;EAMA,MAAMC,cAAc,GAAIC,OAAD,IAAa;IAChCb,YAAY,CACRa,OAAO,CAACC,GAAR,CAAY,CAACC,QAAD,EAAUC,KAAV,KAAoB;MAC5B,OAAO;QACHA,KAAK,EAAEA,KADJ;QAEHD,QAAQ,EAAEA,QAAQ,CAACA,QAFhB;QAGHE,aAAa,EAAEF,QAAQ,CAACG,cAHrB;QAIHC,OAAO,EAAEJ,QAAQ,CAACK;MAJf,CAAP;IAMH,CAPD,CADQ,CAAZ;EAUH,CAXD;;EAaAC,OAAO,CAACC,GAAR,CAAYvB,SAAZ;EAEAH,KAAK,CAAC2B,SAAN,CAAgB,MAAK;IACjBjB,SAAS;IACTM,cAAc,CAACR,IAAD,CAAd;EACH,CAHD,EAGE,EAHF,EA5B2B,CAiC3B;;EACA,SAASoB,OAAT,CAAiBC,KAAjB,EAAwB;IACpB,IAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;IAAA,IAAkCC,WAAlC,CADoB,CAGpB;;IACA,OAAOF,YAAY,IAAI,CAAvB,EAA0B;MAExB;MACAE,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;MACAA,YAAY,GAJY,CAMxB;;MACA,CAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EACtBH,KAAK,CAACC,YAAD,CADiB,CAA5C;IAED;;IAED,OAAOD,KAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAKI,oBACI;IAAA;EAAA,iBADJ;AAGH;;GAtFuB3B,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}