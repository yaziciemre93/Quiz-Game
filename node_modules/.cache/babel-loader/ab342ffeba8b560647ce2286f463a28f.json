{"ast":null,"code":"var _jsxFileName = \"/Users/emre/Desktop/React/quizzical-trivia/src/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n\n  const fetchData = () => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(response => response.json()).then(data => setQuestions(data.results));\n  };\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n  const questionElements = questions.map(question => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: question.question\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-container\",\n    children: questionElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"1ery3Y2F+nTWSbC27k3nmjCRtvo=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","nanoid","Quiz","questions","setQuestions","useState","fetchData","fetch","then","response","json","data","results","useEffect","questionElements","map","question"],"sources":["/Users/emre/Desktop/React/quizzical-trivia/src/Quiz.js"],"sourcesContent":["import React from \"react\"\nimport { nanoid } from \"nanoid\"\n\nexport default function Quiz() {\n\n    const [questions, setQuestions] = React.useState([])\n\n    const fetchData = () => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n        .then((response) => response.json())\n        .then((data) => setQuestions(data.results))\n    }\n\n    React.useEffect(()=> {\n        fetchData()\n    },[])\n\n    const questionElements = questions.map((question) => {\n        return (\n            <>\n                <div className=\"question\" key={nanoid()}>{question.question}</div>\n                <hr></hr>\n            </>\n        )\n    })\n\n    return (\n        <div className=\"question-container\">\n            {questionElements}\n        </div>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,eAAe,SAASC,IAAT,GAAgB;EAAA;;EAE3B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAAlC;;EAEA,MAAMC,SAAS,GAAG,MAAM;IACpBC,KAAK,CAAC,oDAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOG,IAAD,IAAUP,YAAY,CAACO,IAAI,CAACC,OAAN,CAF5B;EAGH,CAJD;;EAMAZ,KAAK,CAACa,SAAN,CAAgB,MAAK;IACjBP,SAAS;EACZ,CAFD,EAEE,EAFF;EAIA,MAAMQ,gBAAgB,GAAGX,SAAS,CAACY,GAAV,CAAeC,QAAD,IAAc;IACjD,oBACI;MAAA,wBACI;QAAK,SAAS,EAAC,UAAf;QAAA,UAA0CA,QAAQ,CAACA;MAAnD,GAA+Bf,MAAM,EAArC;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA,gBADJ;EAMH,CAPwB,CAAzB;EASA,oBACI;IAAK,SAAS,EAAC,oBAAf;IAAA,UACKa;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;;GA5BuBZ,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}