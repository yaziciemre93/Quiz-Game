{"ast":null,"code":"var _jsxFileName = \"/Users/emre/Desktop/React/quizzical-trivia/src/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [userAnswer, setUserAnswer] = React.useState([]);\n  const [data, setData] = React.useState(); // FETCH QUIZ DATA FROM API\n\n  const fetchData = () => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(response => response.json()).then(data => setData(data.results));\n  };\n\n  const buildQuestions = dataArr => {\n    setQuestions(() => {\n      dataArr.map((question, index) => {\n        return {\n          index: index,\n          question: question.question,\n          correctAnswer: question.correct_answer,\n          answers: shuffle(question.incorrect_answers.push(question.question.correct_answer))\n        };\n      });\n    });\n  };\n\n  console.log(questions);\n  React.useEffect(() => {\n    fetchData();\n    buildQuestions(data);\n  }, []); // SHUFFLE ALGORITHM TO USE LATER\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex; // While there remain elements to shuffle.\n\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  const questionElements = questions.map((question, index) => {\n    // ANSWERS ARRAY AND SHUFFLE\n    let answers = [...question.incorrect_answers, question.correct_answer];\n    shuffle(answers); // TOGGLE BUTTON BACKGROUND COLOR WHEN BTN CLICKED\n\n    function toggleBtnBgColor(btn) {\n      btn.target.classList.toggle(\"dark-bg-color\");\n      btn.target.onclick = \"\";\n    }\n\n    console.log(question, index);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: question.question\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), answers.map(answer => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleBtnBgColor,\n          className: \"answer-button\",\n          children: answer\n        }, nanoid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, nanoid(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-container\",\n    children: questionElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"LebRXbzG4CBjvd5x4BFI5cPxFg0=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","nanoid","Quiz","questions","setQuestions","useState","userAnswer","setUserAnswer","data","setData","fetchData","fetch","then","response","json","results","buildQuestions","dataArr","map","question","index","correctAnswer","correct_answer","answers","shuffle","incorrect_answers","push","console","log","useEffect","array","currentIndex","length","randomIndex","Math","floor","random","questionElements","toggleBtnBgColor","btn","target","classList","toggle","onclick","answer"],"sources":["/Users/emre/Desktop/React/quizzical-trivia/src/Quiz.js"],"sourcesContent":["import React from \"react\"\nimport { nanoid } from \"nanoid\"\n\nexport default function Quiz() {\n\n    const [questions, setQuestions] = React.useState([])\n    const [userAnswer, setUserAnswer] = React.useState([])\n\n    const [data, setData] = React.useState()\n    // FETCH QUIZ DATA FROM API\n    const fetchData = () => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n        .then((response) => response.json())\n        .then((data) => setData(data.results))\n    }\n\n    const buildQuestions = (dataArr) => {\n        setQuestions(() => {\n            dataArr.map((question,index) => {\n                return {\n                    index: index,\n                    question: question.question,\n                    correctAnswer: question.correct_answer,\n                    answers: shuffle(question.incorrect_answers.push(question.question.correct_answer))\n                }\n            })\n        })\n    }\n\n    console.log(questions)\n\n    React.useEffect(()=> {\n        fetchData()\n        buildQuestions(data)\n    },[])\n\n    // SHUFFLE ALGORITHM TO USE LATER\n    function shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle.\n        while (currentIndex != 0) {\n      \n          // Pick a remaining element.\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n    }\n\n    const questionElements = questions.map((question, index) => {\n        // ANSWERS ARRAY AND SHUFFLE\n        let answers = [...question.incorrect_answers,question.correct_answer]\n        shuffle(answers)\n\n        // TOGGLE BUTTON BACKGROUND COLOR WHEN BTN CLICKED\n        function toggleBtnBgColor(btn) {\n            btn.target.classList.toggle(\"dark-bg-color\")\n            btn.target.onclick= \"\"\n        }\n\n        console.log(question, index)\n\n        return (\n            <div key={nanoid()}>\n                <div className=\"question\" key={index}>{question.question}</div>\n                {answers.map((answer)=> {\n                    return (\n                        <button key={nanoid()} onClick={toggleBtnBgColor} className=\"answer-button\">{answer}</button>\n                    )\n                })}\n                <hr></hr>\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"question-container\">\n            {questionElements}\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}